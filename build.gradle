buildscript {
	ext {
		kotlinVersion = '1.2.51'
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()

	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
//		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		// add docker dependency
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// using Gradle you need to add a new docker plugin like this:
//		classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.5'
		classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
	}
}

//apply plugin: 'kotlin'
//apply plugin: 'eclipse-wtp'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'docker'
//apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.bmuschko.docker-remote-api'

apply plugin: 'wrapper'
apply plugin: 'idea'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.DockerRegistryCredentials

group = 'com.terracottainnovation'
version = "$applicationVersion"
sourceCompatibility = "$sourceCompatibilityVersion"


repositories {
	mavenCentral()
	jcenter()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	// https://mvnrepository.com/artifact/com.kohlschutter.junixsocket/junixsocket-native-common
	compile 'com.kohlschutter.junixsocket:junixsocket-native-common:2.0.4'

	implementation "org.springframework.boot:spring-boot-dependencies:$springbootVersion"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//Define tasks here

// write this docker build task, this will run just after "./gradlew build" command

task buildImage(type: DockerBuildImage, dependsOn: build) {
	inputDir = file('.')
//	tags = ['sample-sales', "$dockerHubUsername/clusster:sample-sales"]
	def dockerRegistryCredentials = new DockerRegistryCredentials()
	dockerRegistryCredentials.email = dockerHubEmail
	dockerRegistryCredentials.password = dockerHubPassword
	dockerRegistryCredentials.username = dockerHubUsername
	dockerRegistryCredentials.url = dockerRegistryCredentialsURL
	registryCredentials = dockerRegistryCredentials
}

task pushImage(type: DockerPushImage, dependsOn: buildImage) {
	tag = 'sample-sales'
	imageName = "$dockerHubUsername/clusster"
	def dockerRegistryCredentials = new DockerRegistryCredentials()
	dockerRegistryCredentials.email = dockerHubEmail
	dockerRegistryCredentials.password = dockerHubPassword
	dockerRegistryCredentials.username = dockerHubUsername
	registryCredentials = dockerRegistryCredentials

}

/*
task buildDocker(type: Docker, dependsOn: build) {
	push = true
	applicationName = bootJar.baseName
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}
*/

mainClassName = "com.terracottainnovation.dockerspring.App" //This is because we have added com.bmuschko:gradle-docker-plugin
bootJar {
    mainClassName = 'com.terracottainnovation.dockerspring.App'
}

//https://doc.cuba-platform.com/manual-6.8/_gradle_plugin_for_docker.html