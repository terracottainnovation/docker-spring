buildscript {
	ext {
		kotlinVersion = '1.2.51'
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		// add docker dependency
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// using Gradle you need to add a new docker plugin like this:
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: 'wrapper'
apply plugin: 'idea'



group = 'com.terracottainnovation'
version = "$applicationVersion"
sourceCompatibility = "$sourceCompatibilityVersion"

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation "org.springframework.boot:spring-boot-dependencies:$springbootVersion"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//Define tasks here

// write this docker build task, this will run just after "./gradlew build" command
task buildDocker(type: Docker, dependsOn: build) {
	push = true
	applicationName = bootJar.baseName
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}

bootJar {
    mainClassName = 'com.terracottainnovation.dockerspring.App'
}
